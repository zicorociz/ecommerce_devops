name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging

jobs:
  # CI Job (Code Quality and Build)
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Ganti dengan versi Node.js yang Anda gunakan
          cache: 'npm' # Mengaktifkan caching untuk instalasi dependensi yang lebih cepat

      - name: Install Dependencies
        run: npm ci # 'npm ci' lebih cepat dan lebih andal untuk CI daripada 'npm install'

      - name: Run Linter
        run: npm run lint

      - name: Run Jest Tests with Coverage
        run: npm run test:coverage # Menjalankan tes dan menghasilkan laporan coverage
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=zicorociz
            -Dsonar.projectKey=zicorociz_ecommerce_devops
            -Dsonar.python.coverage.reportPaths=coverage.xml

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce:${{ github.ref_name == 'main' && 'production' || 'staging' }}

  # CD Job (Deploy to Production)
  deploy-production:
    needs: ci
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          password: ${{ secrets.PRODUCTION_PASSWORD }}
          port: 22
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/ecommerce:production
            docker stop ecommerce || true
            docker rm ecommerce || true
            docker run -d --name ecommerce -p 8090:8090 ${{ secrets.DOCKER_USERNAME }}/ecommerce:production

  # CD Job (Deploy to Staging)
  deploy-staging:
    needs: ci
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          password: ${{ secrets.STAGING_PASSWORD }}
          port: 22
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/ecommerce:staging
            docker stop ecommerce || true
            docker rm ecommerce || true
            docker run -d --name ecommerce -p 8090:8090 ${{ secrets.DOCKER_USERNAME }}/ecommerce:staging
